// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.disid.proof.ldap.repository;

import com.disid.proof.ldap.model.LocalGroup;
import com.disid.proof.ldap.model.LocalUser;
import com.disid.proof.ldap.model.QLocalUser;
import com.disid.proof.ldap.repository.LocalUserRepositoryCustom;
import com.disid.proof.ldap.repository.LocalUserRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect LocalUserRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: LocalUserRepositoryImpl implements LocalUserRepositoryCustom;
    
    declare @type: LocalUserRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LocalUserRepositoryImpl.LDAP_ID = "ldapId";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LocalUserRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LocalUserRepositoryImpl.BLOCKED = "blocked";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LocalUserRepositoryImpl.NEW_REGISTRATION = "newRegistration";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<LocalUser> LocalUserRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QLocalUser localUser = QLocalUser.localUser;
        
        JPQLQuery<LocalUser> query = from(localUser);
        
        Path<?>[] paths = new Path<?>[] {localUser.ldapId,localUser.name,localUser.blocked,localUser.newRegistration};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(LDAP_ID, localUser.ldapId)
			.map(NAME, localUser.name)
			.map(BLOCKED, localUser.blocked)
			.map(NEW_REGISTRATION, localUser.newRegistration);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, localUser);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param localGroups
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<LocalUser> LocalUserRepositoryImpl.findByLocalGroupsContains(LocalGroup localGroups, GlobalSearch globalSearch, Pageable pageable) {
        
        QLocalUser localUser = QLocalUser.localUser;
        
        JPQLQuery<LocalUser> query = from(localUser);
        
        Assert.notNull(localGroups, "localGroups is required");
        
        query.where(localUser.localGroups.contains(localGroups));
        Path<?>[] paths = new Path<?>[] {localUser.ldapId,localUser.name,localUser.blocked,localUser.newRegistration};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(LDAP_ID, localUser.ldapId)
			.map(NAME, localUser.name)
			.map(BLOCKED, localUser.blocked)
			.map(NEW_REGISTRATION, localUser.newRegistration);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, localUser);
    }
    
}
