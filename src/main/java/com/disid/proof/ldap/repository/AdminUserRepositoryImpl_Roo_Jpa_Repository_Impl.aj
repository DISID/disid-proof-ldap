// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.disid.proof.ldap.repository;

import com.disid.proof.ldap.model.AdminUser;
import com.disid.proof.ldap.model.QAdminUser;
import com.disid.proof.ldap.repository.AdminUserRepositoryCustom;
import com.disid.proof.ldap.repository.AdminUserRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AdminUserRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: AdminUserRepositoryImpl implements AdminUserRepositoryCustom;
    
    declare @type: AdminUserRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AdminUserRepositoryImpl.LOGIN = "login";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AdminUserRepositoryImpl.PASSWORD = "password";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<AdminUser> AdminUserRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QAdminUser adminUser = QAdminUser.adminUser;
        
        JPQLQuery<AdminUser> query = from(adminUser);
        
        Path<?>[] paths = new Path<?>[] {adminUser.login,adminUser.password};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(LOGIN, adminUser.login)
			.map(PASSWORD, adminUser.password);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, adminUser);
    }
    
}
